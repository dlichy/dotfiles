#!/usr/bin/env bash
__doc__='
This is your bashrc file
'

export PATH=$HOME/bin:$PATH
export PATH=$HOME/.local/bin:$PATH
export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH
#export EDITOR=vim


if [ -d "$HOME/.local" ]; then
    export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$HOME/.local
fi

#source $HOME/local/tools/pyenv_ext/pyenv_ext_commands.sh
# Add the pyenv command to our environment if it exists
export PYENV_ROOT="$HOME/.pyenv"
if [ -d "$PYENV_ROOT" ]; then
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$("$PYENV_ROOT"/bin/pyenv init -)"
    eval "$("$PYENV_ROOT"/bin/pyenv init --path)"
    #eval "$(pyenv init --path)"
    #eval "$(pyenv init -)"
    source "$PYENV_ROOT/completions/pyenv.bash"
    export PYENV_PREFIX
    PYENV_PREFIX=$(pyenv prefix)
fi

# References:
#     https://www.reddit.com/r/zsh/comments/x7uj9e/measuring_the_best_value_of_histsize/
# set history to not ignore leading whitespace
export HISTCONTROL=
# Remember last 10000 commands in memory
export HISTSIZE=10000
# Remember last 1000000 commands on disk
export HISTFILESIZE=1000000


deactivate_venv()
{
    # https://stackoverflow.com/questions/85880/determine-if-a-function-exists-in-bash
    if [ -n "$(type -t conda)" ] && [ "$(type -t conda)" = function ]; then
        conda deactivate
    fi
    OLD_VENV=$VIRTUAL_ENV
    echo "deactivate_venv OLD_VENV=$OLD_VENV"
    if [ "$OLD_VENV" != "" ]; then
        if [ -n "$(type -t deactivate)" ] && [ "$(type -t deactivate)" = function ]; then
            # deactivate bash function exists
            deactivate
        fi
    fi
}

workon_py()
{
    __doc__="
    Switch virtual environments
    "
    local NEW_VENV=$1
    echo "workon_py: NEW_VENV = $NEW_VENV"

    if [ ! -f "$NEW_VENV/bin/activate" ]; then
        # Check if it is the name of a conda or virtual env
        # First try conda, then virtualenv
        local TEMP_PATH=$_CONDA_ROOT/envs/$NEW_VENV
        #echo "TEMP_PATH = $TEMP_PATH"
        if [ -d "$TEMP_PATH" ]; then
            NEW_VENV=$TEMP_PATH
        else
            local TEMP_PATH=$HOME/$NEW_VENV
            if [ -d "$TEMP_PATH" ]; then
                local NEW_VENV=$TEMP_PATH
            fi
        fi
    fi
    # Try to find the environment the user requested
    PYENV_ACTIVATE_CAND1=$(echo "$(pyenv root)"/versions/*/envs/"$NEW_VENV"/bin/activate)

    if [ -f "$PYENV_ACTIVATE_CAND1" ]; then
        deactivate_venv
        source "$PYENV_ACTIVATE_CAND1"
    elif [ -d "$NEW_VENV" ]; then
        # Ensure the old env is deactivated
        deactivate_venv
        # shellcheck disable=SC1091
        source "$NEW_VENV/bin/activate"
    fi
}



_AUTOSTART_VENV=1
if [[ "$_AUTOSTART_VENV" == "1" ]]; then
    if [ "$DID_MY_BASHRC_INIT" == "" ]; then
        # For some reason VIRTUAL_ENV is initialized as "", so unset it
        unset VIRTUAL_ENV
        #PYTHON_VERSION_PRIORITY=( "3.12.3" "3.11.2" "3.10.10" "3.10.5" "3.9.9" )
        PYTHON_VERSION_PRIORITY=( "3.11.9" "3.11.2" "3.10.10" "3.10.5" "3.9.9" )
        #PYTHON_VERSION_PRIORITY=( "3.10.5" )
        _found_env=0
        for CHOSEN_PYTHON_VERSION in "${PYTHON_VERSION_PRIORITY[@]}"; do
            if [ -d "$PYENV_ROOT/versions/$CHOSEN_PYTHON_VERSION/envs/pyenv$CHOSEN_PYTHON_VERSION" ]; then
                _found_env=1
                pyenv shell "$CHOSEN_PYTHON_VERSION"
                source "$PYENV_ROOT/versions/$CHOSEN_PYTHON_VERSION/envs/pyenv$CHOSEN_PYTHON_VERSION/bin/activate" 
                break
            fi
        done
        if [[ "$_found_env" == "0" ]]; then
            #echo $CHOSEN_PYTHON_VERSION
            if [ -d "$HOME/.local/conda/envs/conda38" ]; then
                conda activate conda38
            elif [ -d "$HOME/.local/conda/envs/py38" ]; then
                conda activate py38
            elif [ -d "$HOME/.local/conda/envs/py37" ]; then
                conda activate py37
            elif [ -d "$HOME/.local/conda/envs/py36" ]; then
                conda activate py36
            fi 
        fi

    elif [ "$VIRTUAL_ENV" != "" ]; then
        # On reload use the same venv you were in
        #echo "WORKON VIRTUAL_ENV = $VIRTUAL_ENV"
        workon_py "$VIRTUAL_ENV"
    elif [ "$CONDA_PREFIX" != "" ]; then
        # On reload use the same venv you were in
        #echo "WORKON CONDA_PREFIX = $CONDA_PREFIX"
        workon_py "$CONDA_PREFIX"
    fi

fi


alias ls='ls --color --human-readable'

# added by travis gem
#[ -f /home/joncrall/.travis/travis.sh ] && source /home/joncrall/.travis/travis.sh


# Prevent dollar sign from being escaped on tab complete
# https://askubuntu.com/questions/1245016/how-to-disable-automatic-backslash-insert-when-using-environment-variable-names
shopt -s direxpand


# Disable the terminal bell
# https://linuxconfig.org/turn-off-beep-bell-on-linux-terminal
set bell-style none


# Generate via
# pip completion --bash
# pip bash completion start
_pip_completion()
{
    # shellcheck disable=SC2207
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end


# Rust
if [ -f "$HOME/.cargo/env" ]; then
    source "$HOME/.cargo/env"
fi


__note__="
# Enable global python argcomplete

pip install argcomplete
mkdir -p ~/.bash_completion.d
activate-global-python-argcomplete --dest ~/.bash_completion.d
source ~/.bash_completion.d/_python-argcomplete
"
# activate-global-python-argcomplete --dest ~/.bash_completion.d
if [ -f "$HOME/.bash_completion.d/_python-argcomplete" ]; then
    source ~/.bash_completion.d/_python-argcomplete
fi

__note__='
Per CLI enable
eval "$(register-python-argcomplete geowatch)"
eval "$(register-python-argcomplete kwcoco)"
'


DID_MY_BASHRC_INIT="TRUE"

export PYTHONBREAKPOINT=ipdb.set_trace
